{"version":3,"sources":["components/Timer/styles.module.scss","components/Clock/styles.module.scss","components/Button/styles.module.scss","components/Input/styles.module.scss","components/App/styles.module.scss","components/Button/index.tsx","components/Clock/index.tsx","components/Input/index.tsx","hooks/useTimer/index.ts","components/Timer/usePomodoroTimersSetup/reducer.ts","components/Timer/usePomodoroTimersSetup/actions.ts","components/Timer/usePomodoroTimersSetup/index.ts","utils/constants.ts","components/Timer/index.tsx","components/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","children","onClick","ref","React","e","current","blur","className","styles","Clock","timeLeft","initialTime","dashArray","calculateTimeFraction","viewBox","xmlns","cx","cy","r","strokeDasharray","toFixed","data-testid","d","totalSeconds","hours","Math","floor","filter","time","i","map","n","toString","join","formatTime","TimeInput","initialValue","onChange","value","setValue","localOnChange","event","minutes","currentTarget","Number","classnames","type","min","max","useTimer","useState","currentTime","setCurrentTime","isOn","setIsOn","isFinished","setIsFinished","useEffect","interval","setInterval","t","clearInterval","toggle","useCallback","o","timeReducer","state","action","Object","assign","workTime","shortBreakTime","longBreakTime","initialState","usePomodoroTimersSetup","dispatch","onWorkTimeChange","onShortBreakTimeChange","onLongBreakTimeChange","Timer","preventDefault","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.286b6ec9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"timer\":\"styles_timer__3thNU\",\"timer__label\":\"styles_timer__label__1Ugk-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"clock\":\"styles_clock__2_xsk\",\"clock__label\":\"styles_clock__label__3jvFx\",\"clock__circle\":\"styles_clock__circle__3bClP\",\"clock__path\":\"styles_clock__path__1xyVs\",\"clock__path-remaining\":\"styles_clock__path-remaining__K7WQA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"styles_button__12U2K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"styles_input__33MKN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"styles_app__1jJpR\"};","import * as React from 'react';\nimport styles from './styles.module.scss';\n\ninterface IButtonProps {\n    children: React.ReactNode,\n    onClick: (event: React.MouseEvent) => void,\n}\n\nconst Button: React.FunctionComponent<IButtonProps> = ({ children, onClick }) => {\n  const ref = React.useRef<HTMLButtonElement>(null);\n\n  const localOnClick = (e: React.MouseEvent) => {\n      onClick(e);\n      ref.current?.blur();\n  }\n\n\n  return <button \n    onClick={localOnClick} \n    className={styles['button']}\n    ref={ref}\n    >\n      {children}\n  </button>;\n};\n\nexport default Button;\n","import * as React from 'react';\nimport styles from './styles.module.scss';\n\ninterface IClockProps {\n    timeLeft?: number\n    initialTime?: number,\n};\n\nconst FULL_DASH_ARRAY = 283;\n\nconst calculateTimeFraction = (initialTime: number, timeLeft: number): number => {\n    const rawTimeFraction = (initialTime - timeLeft) / initialTime;\n\n    return rawTimeFraction;\n}\n\nconst formatTime = (totalSeconds: number): string => {\n    const hours: number = Math.floor(totalSeconds / 3600);\n    const minutes: number = Math.floor(totalSeconds / 60) - (hours * 60);\n    const seconds: number = Math.floor(totalSeconds % 60);\n\n    const formattedTime = [hours, minutes, seconds]\n        .filter((time, i) => !(i === 0 && time === 0))\n        .map((n: number) => n > 9 ? n.toString() : `0${n}`)\n        .join(':');\n\n    return formattedTime; \n};\n\nconst Clock: React.FunctionComponent<IClockProps> = ({ timeLeft, initialTime }) => {\n  const dashArray: number = initialTime && timeLeft\n    ? calculateTimeFraction(initialTime, timeLeft) * FULL_DASH_ARRAY\n    : 0;\n\n    \n  return (\n    <div className={styles[\"clock\"]}>\n    <svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g className={styles[\"clock__circle\"]}>\n        <circle className={styles[\"clock__path\"]} cx=\"50\" cy=\"50\" r=\"45\"></circle>\n        <path\n            strokeDasharray={`${dashArray.toFixed(0)} ${FULL_DASH_ARRAY}`}\n            className={styles[\"clock__path-remaining\"]}\n            data-testid=\"clock-remaining-time\"\n            d=\"\n            M 50, 50\n            m -45, 0\n            a 45,45 0 1,0 90,0\n            a 45,45 0 1,0 -90,0\n            \"\n        ></path>\n      </g>\n    </svg>\n    <span className={styles[\"clock__label\"]} data-testid=\"clock-label\">\n      {\n        timeLeft \n          ? formatTime(timeLeft) \n          : '-'\n      }\n    </span>\n  </div>\n  );\n};\n\nexport default Clock;\n","import * as React from 'react';\nimport classnames from 'classnames';\nimport styles from './styles.module.scss';\n\ninterface ITimeInputProps {\n    initialValue?: number,\n    onChange: (minutes: number) => void,\n    className?: string, \n}\n\nconst TimeInput: React.FunctionComponent<ITimeInputProps> = ({ initialValue = 0, onChange, className }) => {\n  const [value, setValue] = React.useState<number>(initialValue);\n\n  const localOnChange = React.useCallback((event: React.FormEvent<HTMLInputElement>) => {\n      const minutes = event.currentTarget.value !== '' \n        ? Number(event.currentTarget.value)\n        : 0;\n      setValue(minutes);\n      onChange(minutes);\n  }, \n  [setValue, onChange]);\n\n  return <input \n    className={classnames(styles['input'], className)} \n    type=\"number\"\n    min=\"0\"\n    max=\"60\"\n    value={value.toString()} \n    onChange={localOnChange} \n  />;\n};\n\nexport default TimeInput;\n","import React from 'react';\n\nexport interface ITimerState {\n    isFinished: boolean,\n    currentTime: number,\n    toggle: () => void,\n};\n\nconst second = 1000;\n\nconst useTimer = (time: number): ITimerState => {\n    const [currentTime, setCurrentTime] = React.useState<number>(time);\n    const [isOn, setIsOn] = React.useState<boolean>(false);\n    const [isFinished, setIsFinished] = React.useState<boolean>(false);\n\n    React.useEffect(() => {\n        setCurrentTime(time);\n    }, [time, setCurrentTime])\n\n    React.useEffect(() => {\n        if (isOn) {\n            const interval = setInterval(() => {\n                setCurrentTime((t: number): number => --t);\n            }, second)\n\n            return () => { \n                clearInterval(interval) \n            }\n        }\n    }, [isOn, setCurrentTime]);\n\n    React.useEffect(() => {\n        if (currentTime === 0) {\n            setIsOn(false);\n            setIsFinished(true);\n        }\n    }, [currentTime, setIsOn, setIsFinished])\n\n    const toggle = React.useCallback(\n        () => setIsOn((o: boolean) => !o), \n        []\n    );\n\n    return {\n        isFinished,\n        toggle,\n        currentTime\n    };\n};\n\nexport default useTimer;","import { \n    TimeAction, \n    SET_WORK_TIME,\n    SET_SHORT_BREAK_TIME,\n    SET_LONG_BREAK_TIME,\n} from './actions';\n\nexport interface ITimerSetupState {\n    workTime: number,\n    shortBreakTime: number,\n    longBreakTime: number,\n};\n\nconst timeReducer = (state: ITimerSetupState, action: TimeAction) => {\n    switch (action.type) {\n        case SET_WORK_TIME:\n            return Object.assign({}, state, {\n                workTime: action.time,\n            });\n        case SET_SHORT_BREAK_TIME:\n            return Object.assign({}, state, {\n                shortBreakTime: action.time,\n            })\n        case SET_LONG_BREAK_TIME:\n            return Object.assign({}, state, {\n                longBreakTime: action.time,\n            })\n        default:\n            return state;\n    }\n}\n\nexport default timeReducer;","export const SET_WORK_TIME = 'SET_WORK_TIME';\nexport const SET_SHORT_BREAK_TIME = 'SET_SHORT_BREAK_TIME';\nexport const SET_LONG_BREAK_TIME = 'SET_LONG_BREAK_TIME';\n\nexport interface TimeAction {\n    type: string,\n    time: number,\n};","import * as React from 'react';\nimport timeReducer, { ITimerSetupState } from './reducer';\nimport { \n  SET_WORK_TIME, \n  SET_SHORT_BREAK_TIME,\n  SET_LONG_BREAK_TIME\n} from './actions';\nimport { minute } from '../../../utils/constants';\n\ninterface IPomodoroSetup {\n    state: ITimerSetupState,\n    onWorkTimeChange: (minutes: number) => void,\n    onShortBreakTimeChange: (minutes: number) => void,\n    onLongBreakTimeChange: (minutes: number) => void,\n}\n\nconst initialState: ITimerSetupState = { \n  workTime: 50 * minute, \n  longBreakTime: 30 * minute, \n  shortBreakTime: 10 * minute\n};\n\nconst usePomodoroTimersSetup = (): IPomodoroSetup => {\n    const [state, dispatch] = React.useReducer(timeReducer, initialState);\n    \n    const onWorkTimeChange = React.useCallback((minutes: number): void => {\n      dispatch({ type: SET_WORK_TIME, time: minutes * minute });\n    }, []);\n    \n    const onShortBreakTimeChange = React.useCallback((minutes: number): void => {\n      dispatch({ type: SET_SHORT_BREAK_TIME, time: minutes * minute });\n    }, []);\n    \n    const onLongBreakTimeChange = React.useCallback((minutes: number): void => {\n      dispatch({ type: SET_LONG_BREAK_TIME, time: minutes * minute });\n    }, []);\n  \n    return {\n        state,\n        onWorkTimeChange,\n        onShortBreakTimeChange,\n        onLongBreakTimeChange,\n    }\n  }\n\nexport default usePomodoroTimersSetup;","export const minute: number = 60;","import * as React from 'react';\nimport Button from '../Button';\nimport Clock from '../Clock';\nimport TimeInput from '../Input';\nimport useTimer from '../../hooks/useTimer';\nimport styles from './styles.module.scss';\nimport usePomodoroTimersSetup from './usePomodoroTimersSetup';\nimport { minute } from '../../utils/constants';\n\ninterface ITimerProps {\n}\n\nconst Timer: React.FunctionComponent<ITimerProps> = () => {\n  const { \n    state, \n    onWorkTimeChange, \n    onShortBreakTimeChange, \n    onLongBreakTimeChange\n  } = usePomodoroTimersSetup();\n  \n  const { currentTime, toggle } = useTimer(state.workTime);\n\n  const onClick = React.useCallback((e: React.MouseEvent): void => {\n    e.preventDefault();\n    toggle();\n  }, [toggle]);\n\n  return (\n    <div className={styles['timer']}>\n      <Clock timeLeft={currentTime} initialTime={state.workTime} />\n      <label className={styles['timer__label']}>\n        Work [min]\n        <TimeInput \n          className={styles['timer__input']} \n          initialValue={(state.workTime / minute)} \n          onChange={onWorkTimeChange} \n        />\n      </label>\n      <label className={styles['timer__label']}>\n        Short break [min]\n        <TimeInput \n          className={styles['timer__input']} \n          initialValue={(state.shortBreakTime / minute)} \n          onChange={onShortBreakTimeChange} \n        />\n      </label>\n      <label className={styles['timer__label']}>\n        Long break [min]\n        <TimeInput \n          className={styles['timer__input']} \n          initialValue={(state.longBreakTime / minute)} \n          onChange={onLongBreakTimeChange} \n        />\n      </label>\n      <Button onClick={onClick}>START</Button>\n    </div>\n  );\n};\n\nexport default Timer;\n","import React from 'react';\nimport Timer from '../Timer';\nimport styles from './styles.module.scss';\n\nfunction App() {\n  return (\n    <div className={styles['app']}>\n      <Timer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/index';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}
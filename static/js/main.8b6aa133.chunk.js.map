{"version":3,"sources":["components/Timer/styles.module.scss","components/Clock/styles.module.scss","components/Button/styles.module.scss","components/Input/styles.module.scss","components/App/styles.module.scss","components/Button/index.tsx","components/Clock/index.tsx","components/Input/index.tsx","hooks/useTimer/index.ts","components/Timer/usePomodoroTimersSetup/reducer.ts","components/Timer/usePomodoroTimersSetup/actions.ts","components/Timer/usePomodoroTimersSetup/index.ts","utils/constants.ts","components/Timer/index.tsx","components/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","children","onClick","ref","React","e","current","blur","className","styles","Clock","totalSeconds","timeLeft","initialTime","dashArray","calculateTimeFraction","viewBox","xmlns","cx","cy","r","strokeDasharray","toFixed","data-testid","d","Math","floor","map","n","toString","join","Input","initialValue","onChange","value","setValue","localOnChange","event","currentTarget","classnames","useTimer","time","useState","currentTime","setCurrentTime","isOn","setIsOn","isFinished","setIsFinished","useEffect","interval","setInterval","t","clearInterval","toggle","useCallback","o","timeReducer","state","action","type","Object","assign","workTime","shortBreakTime","longBreakTime","initialState","toMinute","inputValue","Number","usePomodoroTimersSetup","dispatch","onWorkTimeChange","onShortBreakTimeChange","onLongBreakTimeChange","Timer","preventDefault","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8b6aa133.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"timer\":\"styles_timer__3thNU\",\"timer__label\":\"styles_timer__label__1Ugk-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"clock\":\"styles_clock__2_xsk\",\"clock__label\":\"styles_clock__label__3jvFx\",\"clock__circle\":\"styles_clock__circle__3bClP\",\"clock__path\":\"styles_clock__path__1xyVs\",\"clock__path-remaining\":\"styles_clock__path-remaining__K7WQA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"styles_button__12U2K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"styles_input__33MKN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"styles_app__1jJpR\"};","import * as React from 'react';\nimport styles from './styles.module.scss';\n\ninterface IButtonProps {\n    children: React.ReactNode,\n    onClick: (event: React.MouseEvent) => void,\n}\n\nconst Button: React.FunctionComponent<IButtonProps> = ({ children, onClick }) => {\n  const ref = React.useRef<HTMLButtonElement>(null);\n\n  const localOnClick = (e: React.MouseEvent) => {\n      onClick(e);\n      ref.current?.blur();\n  }\n\n\n  return <button \n    onClick={localOnClick} \n    className={styles['button']}\n    ref={ref}\n    >\n      {children}\n  </button>;\n};\n\nexport default Button;\n","import * as React from 'react';\nimport styles from './styles.module.scss';\n\ninterface IClockProps {\n    timeLeft?: number\n    initialTime?: number,\n};\n\nconst FULL_DASH_ARRAY = 283;\n\nconst calculateTimeFraction = (initialTime: number, timeLeft: number): number => {\n    const rawTimeFraction = (initialTime - timeLeft) / initialTime;\n\n    return rawTimeFraction;\n}\n\nconst formatTime = (totalSeconds: number): string => {\n    const minutes = Math.floor(totalSeconds % 3600 / 60);\n    const seconds = Math.floor(totalSeconds % 3600 % 60);\n\n    const formattedTime = [minutes, seconds]\n        .map((n: number) => n > 9 ? n.toString() : `0${n}`)\n        .join(':');\n\n    return formattedTime; \n};\n\nconst Clock: React.FunctionComponent<IClockProps> = ({ timeLeft, initialTime }) => {\n  const dashArray: number = initialTime && timeLeft\n    ? calculateTimeFraction(initialTime, timeLeft) * FULL_DASH_ARRAY\n    : 0;\n\n    \n  return (\n    <div className={styles[\"clock\"]}>\n    <svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g className={styles[\"clock__circle\"]}>\n        <circle className={styles[\"clock__path\"]} cx=\"50\" cy=\"50\" r=\"45\"></circle>\n        <path\n            strokeDasharray={`${dashArray.toFixed(0)} ${FULL_DASH_ARRAY}`}\n            className={styles[\"clock__path-remaining\"]}\n            data-testid=\"clock-remaining-time\"\n            d=\"\n            M 50, 50\n            m -45, 0\n            a 45,45 0 1,0 90,0\n            a 45,45 0 1,0 -90,0\n            \"\n        ></path>\n      </g>\n    </svg>\n    <span className={styles[\"clock__label\"]}>\n      {\n        timeLeft \n          ? formatTime(timeLeft) \n          : '-'\n      }\n    </span>\n  </div>\n  );\n};\n\nexport default Clock;\n","import * as React from 'react';\nimport classnames from 'classnames';\nimport styles from './styles.module.scss';\n\ninterface IInputProps {\n    initialValue?: string,\n    onChange: (event: React.FormEvent<HTMLInputElement>) => void,\n    className?: string, \n}\n\nconst Input: React.FunctionComponent<IInputProps> = ({ initialValue = '', onChange, className }) => {\n  const [value, setValue] = React.useState<string>(initialValue);\n\n  const localOnChange = React.useCallback((event: React.FormEvent<HTMLInputElement>) => {\n      setValue(event.currentTarget.value);\n      onChange(event);\n  }, \n  [setValue, onChange]);\n\n  return <input \n    className={classnames(styles['input'], className)} \n    value={value} \n    onChange={localOnChange} \n  />;\n};\n\nexport default Input;\n","import React from 'react';\n\nexport interface ITimerState {\n    isFinished: boolean,\n    currentTime: number,\n    toggle: () => void,\n};\n\nconst second = 1000;\n\nconst useTimer = (time: number): ITimerState => {\n    const [currentTime, setCurrentTime] = React.useState<number>(time);\n    const [isOn, setIsOn] = React.useState<boolean>(false);\n    const [isFinished, setIsFinished] = React.useState<boolean>(false);\n\n    React.useEffect(() => {\n        setCurrentTime(time);\n    }, [time, setCurrentTime])\n\n    React.useEffect(() => {\n        if (isOn) {\n            const interval = setInterval(() => {\n                setCurrentTime((t: number): number => --t);\n            }, second)\n\n            return () => { \n                clearInterval(interval) \n            }\n        }\n    }, [isOn, setCurrentTime]);\n\n    React.useEffect(() => {\n        if (currentTime === 0) {\n            setIsOn(false);\n            setIsFinished(true);\n        }\n    }, [currentTime, setIsOn, setIsFinished])\n\n    const toggle = React.useCallback(\n        () => setIsOn((o: boolean) => !o), \n        []\n    );\n\n    return {\n        isFinished,\n        toggle,\n        currentTime\n    };\n};\n\nexport default useTimer;","import { \n    TimeAction, \n    SET_WORK_TIME,\n    SET_SHORT_BREAK_TIME,\n    SET_LONG_BREAK_TIME,\n} from './actions';\n\nexport interface ITimerSetupState {\n    workTime: number,\n    shortBreakTime: number,\n    longBreakTime: number,\n};\n\nconst timeReducer = (state: ITimerSetupState, action: TimeAction) => {\n    switch (action.type) {\n        case SET_WORK_TIME:\n            return Object.assign({}, state, {\n                workTime: action.time,\n            });\n        case SET_SHORT_BREAK_TIME:\n            return Object.assign({}, state, {\n                shortBreakTime: action.time,\n            })\n        case SET_LONG_BREAK_TIME:\n            return Object.assign({}, state, {\n                longBreakTime: action.time,\n            })\n        default:\n            return state;\n    }\n}\n\nexport default timeReducer;","export const SET_WORK_TIME = 'SET_WORK_TIME';\nexport const SET_SHORT_BREAK_TIME = 'SET_SHORT_BREAK_TIME';\nexport const SET_LONG_BREAK_TIME = 'SET_LONG_BREAK_TIME';\n\nexport interface TimeAction {\n    type: string,\n    time: number,\n};","import * as React from 'react';\nimport timeReducer, { ITimerSetupState } from './reducer';\nimport { \n  SET_WORK_TIME, \n  SET_SHORT_BREAK_TIME,\n  SET_LONG_BREAK_TIME\n} from './actions';\nimport { minute } from '../../../utils/constants';\n\ninterface IPomodoroSetup {\n    state: ITimerSetupState,\n    onWorkTimeChange: (e: React.FormEvent<HTMLInputElement>) => void,\n    onShortBreakTimeChange: (e: React.FormEvent<HTMLInputElement>) => void,\n    onLongBreakTimeChange: (e: React.FormEvent<HTMLInputElement>) => void,\n}\n\nconst initialState: ITimerSetupState = { \n  workTime: 50 * minute, \n  longBreakTime: 30 * minute, \n  shortBreakTime: 10 * minute\n};\n\nconst toMinute = (inputValue: string) => {\n  if (inputValue === '') {\n    return 0;\n  }\n\n  return Number(inputValue) * minute;\n}\n\nconst usePomodoroTimersSetup = (): IPomodoroSetup => {\n    const [state, dispatch] = React.useReducer(timeReducer, initialState);\n    \n    const onWorkTimeChange = React.useCallback((e: React.FormEvent<HTMLInputElement>): void => {\n      dispatch({ type: SET_WORK_TIME, time: toMinute(e.currentTarget.value) });\n    }, []);\n    \n    const onShortBreakTimeChange = React.useCallback((e: React.FormEvent<HTMLInputElement>): void => {\n      dispatch({ type: SET_SHORT_BREAK_TIME, time: toMinute(e.currentTarget.value) });\n    }, []);\n    \n    const onLongBreakTimeChange = React.useCallback((e: React.FormEvent<HTMLInputElement>): void => {\n      dispatch({ type: SET_LONG_BREAK_TIME, time: toMinute(e.currentTarget.value) });\n    }, []);\n  \n    return {\n        state,\n        onWorkTimeChange,\n        onShortBreakTimeChange,\n        onLongBreakTimeChange,\n    }\n  }\n\nexport default usePomodoroTimersSetup;","export const minute: number = 60;","import * as React from 'react';\nimport Button from '../Button';\nimport Clock from '../Clock';\nimport Input from '../Input';\nimport useTimer from '../../hooks/useTimer';\nimport styles from './styles.module.scss';\nimport usePomodoroTimersSetup from './usePomodoroTimersSetup';\nimport { minute } from '../../utils/constants';\n\ninterface ITimerProps {\n}\n\nconst Timer: React.FunctionComponent<ITimerProps> = () => {\n  const { \n    state, \n    onWorkTimeChange, \n    onShortBreakTimeChange, \n    onLongBreakTimeChange\n  } = usePomodoroTimersSetup();\n  \n  const { currentTime, toggle } = useTimer(state.workTime);\n\n  const onClick = React.useCallback((e: React.MouseEvent): void => {\n    e.preventDefault();\n    toggle();\n  }, [toggle]);\n\n  return (\n    <div className={styles['timer']}>\n      <Clock timeLeft={currentTime} initialTime={state.workTime} />\n      <label className={styles['timer__label']}>\n        Work [min]\n        <Input \n          className={styles['timer__input']} \n          initialValue={(state.workTime / minute).toString()} \n          onChange={onWorkTimeChange} \n        />\n      </label>\n      <label className={styles['timer__label']}>\n        Short break [min]\n        <Input \n          className={styles['timer__input']} \n          initialValue={(state.shortBreakTime / minute).toString()} \n          onChange={onShortBreakTimeChange} \n        />\n      </label>\n      <label className={styles['timer__label']}>\n        Long break [min]\n        <Input \n          className={styles['timer__input']} \n          initialValue={(state.longBreakTime / minute).toString()} \n          onChange={onLongBreakTimeChange} \n        />\n      </label>\n      <Button onClick={onClick}>START</Button>\n    </div>\n  );\n};\n\nexport default Timer;\n","import React from 'react';\nimport Timer from '../Timer';\nimport styles from './styles.module.scss';\n\nfunction App() {\n  return (\n    <div className={styles['app']}>\n      <Timer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/index';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}